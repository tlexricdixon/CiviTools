@page "/designer"
@inject ComponentRegistry Registry
@rendermode InteractiveServer

<PageTitle>Designer</PageTitle>

<div class="designer-grid">
  <!-- Toolbox -->
  <section class="panel">
    <h5 class="mb-3">Toolbox</h5>
    @foreach (var d in Registry.All())
    {
        <button type="button"
                class="btn btn-outline-primary btn-sm w-100 mb-2"
                @onclick="() => AddComponent(d)">
            @d.DisplayName
        </button>
    }
    <hr />
    <div class="toolbar">
        <button class="btn btn-outline-secondary btn-sm" disabled="@(_selected is null)" @onclick="MoveUp">Move Up</button>
        <button class="btn btn-outline-secondary btn-sm" disabled="@(_selected is null)" @onclick="MoveDown">Move Down</button>
        <button class="btn btn-outline-danger btn-sm" disabled="@(_selected is null)" @onclick="RemoveSelected">Remove</button>
    </div>
  </section>

  <!-- Canvas -->
  <section class="panel">
    <h5 class="mb-3">Canvas</h5>
    <div class="canvas">
      @if (!Canvas.Any())
      {
        <div class="text-muted">Add components from the toolbox…</div>
      }
      else
      {
                @for (int i = 0; i < Canvas.Count; i++)
                {
                    var node = Canvas[i];
                    var cls = "node";
                    if (_selected?.Component.Id == node.Component.Id) cls += " selected";
                    if (_dropIndex == i) cls += " drop-hint";

                    <div class="@cls"
                         draggable="true"
                         @ondragstart="@(() => OnDragStart(i))"
                         @ondragover:preventDefault="true"
                         @ondragover="@(() => OnDragOver(i))"
                         @ondrop="@(() => OnDrop(i))"
                         @onclick="@(() => Select(node))">
                        <strong>@node.Component.Title</strong>
                        <div class="small text-muted">@node.Component.GetType().Name</div>
                    </div>
                }
      }
    </div>
  </section>

  <!-- Properties -->
  <section class="panel">
    <h5 class="mb-3">Properties</h5>
    @if (_selected is null)
    {
        <div class="text-muted">Select a component on the canvas.</div>
    }
    else
    {
        @foreach (var pm in _designProps)
        {
            <div class="mb-2">
                <label class="form-label">@pm.Label</label>
                @switch (pm.Type)
                {
                    case "string":
                        <input class="form-control" value="@Convert.ToString(pm.Getter(_selected.Component))"
                               @onchange="(e => SetProp(pm, e.Value))" />
                        break;
                    case "int":
                        <input type="number" class="form-control" value="@Convert.ToString(pm.Getter(_selected.Component))"
                               @onchange="(e => SetProp(pm, e.Value))" />
                        break;
                    case "bool":
                        <input type="checkbox" class="form-check-input"
                               checked="@(Equals(pm.Getter(_selected.Component), true))"
                               @onchange="(e => SetProp(pm, (bool?)e.Value == true))" />
                        break;
                    default:
                        <div class="text-muted">Unsupported editor: @pm.Type</div>
                        break;
                }
            </div>
        }
    }
  </section>
</div>

<hr class="my-4" />

<h5>Live Preview</h5>
<FormHost Nodes="Canvas" />
